<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ming-2000</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-11T09:12:50.138Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Ming hongping</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux ftp配置</title>
    <link href="http://example.com/2020/11/11/Linux-ftp%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2020/11/11/Linux-ftp%E9%85%8D%E7%BD%AE/</id>
    <published>2020-11-11T09:12:50.000Z</published>
    <updated>2020-11-11T09:12:50.138Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>node重新安装依赖模块</title>
    <link href="http://example.com/2020/11/10/node%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%A8%A1%E5%9D%97-1/"/>
    <id>http://example.com/2020/11/10/node%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%A8%A1%E5%9D%97-1/</id>
    <published>2020-11-10T12:26:06.000Z</published>
    <updated>2020-11-12T03:27:55.833Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/11/10/node%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%A8%A1%E5%9D%97-1/timg.png" class><a id="more"></a><h3 id="windows操作系统"><a href="#windows操作系统" class="headerlink" title="windows操作系统"></a>windows操作系统</h3><p><code>npm install -g rimraf</code><br><code>rimraf node_modules</code><br><code>rimraf package-lock.json</code></p><h3 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h3><p><code>rm -rf node_modules</code><br><code>rm package-lock.json</code></p><h3 id="2-清除缓存（非必须）下方代码不分操作系统"><a href="#2-清除缓存（非必须）下方代码不分操作系统" class="headerlink" title="2.清除缓存（非必须）下方代码不分操作系统"></a>2.清除缓存（非必须）下方代码不分操作系统</h3><p><code>npm cache clear --force</code></p><h3 id="3-重新安装依赖包，安装完成会自动生成package-lock-json"><a href="#3-重新安装依赖包，安装完成会自动生成package-lock-json" class="headerlink" title="3.重新安装依赖包，安装完成会自动生成package-lock.json"></a>3.重新安装依赖包，安装完成会自动生成package-lock.json</h3><p><code>npm config install -g cnpm --registry=https://registry.npm.taobao.org</code></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/2020/11/10/node%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%A8%A1%E5%9D%97-1/timg.png&quot; class&gt;</summary>
    
    
    
    <category term="node" scheme="http://example.com/categories/node/"/>
    
    
    <category term="博客           //多个标签可以这样添加" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2-%E5%A4%9A%E4%B8%AA%E6%A0%87%E7%AD%BE%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%E6%B7%BB%E5%8A%A0/"/>
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>shell-for循环</title>
    <link href="http://example.com/2020/10/26/shell-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2020/10/26/shell-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84/</id>
    <published>2020-10-26T02:30:46.000Z</published>
    <updated>2020-11-14T07:17:50.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="㈠-列表循环"><a href="#㈠-列表循环" class="headerlink" title="㈠ 列表循环"></a>㈠ 列表循环</h3><h4 id="列表for循环：用于将一组命令执行知的次数"><a href="#列表for循环：用于将一组命令执行知的次数" class="headerlink" title="列表for循环：用于将一组命令执行知的次数"></a>列表for循环：用于将一组命令执行知的次数</h4><h4 id="基本语法格式"><a href="#基本语法格式" class="headerlink" title="基本语法格式"></a>基本语法格式</h4><a id="more"></a><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> &#123;list&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">         command </span><br><span class="line">         command</span><br><span class="line">         …</span><br><span class="line">    done</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for variable in a b c  </span><br><span class="line"></span><br><span class="line">    do</span><br><span class="line">        command</span><br><span class="line">        command</span><br><span class="line">    done  </span><br></pre></td></tr></table></figure><p><strong>举例说明</strong></p><p>  powershell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for var in &#123;1..10&#125;;do echo $var;done </span><br><span class="line">for var in 1 2 3 4 5;do echo $var;done    </span><br><span class="line">for var in &#96;seq 10&#96;;do echo $var;done   </span><br><span class="line">for var in $(seq 10);do echo $var;done  </span><br><span class="line">for var in &#123;0..10..2&#125;;do echo $var;done  </span><br><span class="line">for var in &#123;2..10..2&#125;;do echo $var;done  </span><br><span class="line">for var in &#123;10..1&#125;;do echo $var;done</span><br><span class="line">for var in &#123;10..1..-2&#125;;do echo $var;done   </span><br><span class="line">for var in &#96;seq 10 -2 1&#96;;do echo $var;done </span><br></pre></td></tr></table></figure><h3 id="㈡-不带列表循环"><a href="#㈡-不带列表循环" class="headerlink" title="㈡ 不带列表循环"></a>㈡ 不带列表循环</h3><h4 id="不带列表的for循环执行时由用户指定参数和参数的个数"><a href="#不带列表的for循环执行时由用户指定参数和参数的个数" class="headerlink" title="不带列表的for循环执行时由用户指定参数和参数的个数"></a>不带列表的for循环执行时由用户指定参数和参数的个数</h4><h4 id="基本语法格式-1"><a href="#基本语法格式-1" class="headerlink" title="基本语法格式"></a>基本语法格式</h4><p>powershell  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for variable  </span><br><span class="line">do  </span><br><span class="line">       command </span><br><span class="line">    command</span><br><span class="line">    …</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> var</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;脚本后面有<span class="variable">$</span>#个参数&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="㈢-类C风格的for循环"><a href="#㈢-类C风格的for循环" class="headerlink" title="㈢ 类C风格的for循环"></a>㈢ 类C风格的for循环</h3><h4 id="基本语法结构"><a href="#基本语法结构" class="headerlink" title="基本语法结构"></a>基本语法结构</h4><p>powershell   </p><pre><code>for(( expr1;expr2;expr3 ))    do        command        command        …    donefor (( i=1;i&lt;=5;i++))    do      echo $i    done</code></pre><p>expr1：定义变量并赋初值<br>expr2：决定是否进行循环（条件）<br>expr3：决定循环变量如何改变，决定循环什么时候退出</p><h4 id="举例说明-1"><a href="#举例说明-1" class="headerlink" title="举例说明"></a>举例说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">powershell  </span><br><span class="line"></span><br><span class="line"> # for ((i&#x3D;1;i&lt;&#x3D;5;i++));do echo $i;done   </span><br><span class="line"> # for ((i&#x3D;1;i&lt;&#x3D;10;i+&#x3D;2));do echo $i;done  </span><br><span class="line"> # for ((i&#x3D;2;i&lt;&#x3D;10;i+&#x3D;2));do echo $i;done  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-应用案例"><a href="#2-应用案例" class="headerlink" title="2. 应用案例"></a>2. 应用案例</h2><h3 id="㈠-脚本计算1-100奇数和"><a href="#㈠-脚本计算1-100奇数和" class="headerlink" title="㈠ 脚本计算1-100奇数和"></a>㈠ 脚本计算1-100奇数和</h3><h4 id="①-思路"><a href="#①-思路" class="headerlink" title="① 思路"></a>① 思路</h4><ol><li>定义一个变量来保存奇数的和   ==sum===0</li><li>找出1-100的奇数，保存到另一个变量里 i 遍历出来的奇数</li><li>从1-100中找出奇数后，再相加，然后将和赋值给变量  循环变量  for</li><li>遍历完毕后，将sum的值打印出来<h4 id="②-落地实现（条条大路通罗马）"><a href="#②-落地实现（条条大路通罗马）" class="headerlink" title="② 落地实现（条条大路通罗马）"></a>② 落地实现（条条大路通罗马）</h4></li></ol><p>powershell<br><code>#!/bin/env bash</code><br>计算1-100的奇数和<br>定义变量来保存奇数和  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sum&#x3D;0</span><br><span class="line"></span><br><span class="line">for &amp;emsp; &amp;emsp;循环遍历1-100的奇数，并且相加，把结果重新赋值给sum</span><br><span class="line"></span><br><span class="line">for i in &#123;1..100..2&#125;</span><br><span class="line">do</span><br><span class="line">let sum&#x3D;$sum+$i</span><br><span class="line">done  &amp;emsp; &amp;emsp;打印所有奇数的和</span><br><span class="line"></span><br><span class="line">echo &quot;1-100的奇数和是:$sum&quot;</span><br></pre></td></tr></table></figure><p><strong>方法1：</strong></p><pre><code>#!/bin/bashsum=0for i in &#123;1..100..2&#125;do    sum=$[$i+$sum]doneecho &quot;1-100的奇数和为:$sum&quot;</code></pre><p><strong>方法2：</strong></p><pre><code>#!/bin/bashsum=0for ((i=1;i&lt;=100;i+=2))do    let sum=$i+$sumdoneecho &quot;1-100的奇数和为:$sum&quot;</code></pre><p><strong>方法3：</strong></p><pre><code>#!/bin/bashsum=0for ((i=1;i&lt;=100;i++))do    if [ $[$i%2] -ne 0 ];then    let sum=$sum+$i    fi  </code></pre><p><code>或者 </code>   </p><pre><code>test $[$i%2] -ne 0 &amp;&amp; let sum=$sum+$idoneecho &quot;1-100的奇数和为:$sum&quot;</code></pre><p><strong>方法4：</strong>  </p><pre><code>sum=0for ((i=1;i&lt;=100;i++))do    if [ $[$i%2] -eq 0 ];then    continue    else    let sum=$sum+$i    fidoneecho &quot;1-100的奇数和为:$sum&quot;#!/bin/bashsum=0for ((i=1;i&lt;=100;i++))do    test $[$i%2] -eq 0 &amp;&amp; continue || let sum=sum+$idoneecho &quot;1-100的奇数和是:$sum&quot;</code></pre><h4 id="③-循环控制语句"><a href="#③-循环控制语句" class="headerlink" title="③ 循环控制语句"></a>③ 循环控制语句</h4><p><strong>循环体：</strong> do….done之间的内容</p><ul><li>continue：继续；表示循环体内下面的代码不执行，重新开始下一次循环</li><li>break：打断；马上停止执行本次循环，执行循环体后面的代码</li><li>exit：表示直接跳出程序</li></ul><p>shell   </p><pre><code>[root@server ~]# cat for5.sh #!/bin/bashfor i in &#123;1..5&#125;do    test $i -eq 2 &amp;&amp; break || touch /tmp/file$idoneecho hello hahahah</code></pre><h3 id="㈡-判断所输整数是否为质数"><a href="#㈡-判断所输整数是否为质数" class="headerlink" title="㈡ 判断所输整数是否为质数"></a>㈡ 判断所输整数是否为质数</h3><p><strong>质数(素数)：</strong>只能被1和它本身整除的数叫质数。   </p><p>2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</p><h4 id="①-思路-1"><a href="#①-思路-1" class="headerlink" title="① 思路"></a>① 思路</h4><ol><li>让用户输入一个数，保存到一个变量里   <code>read -p &quot;请输入一个正整数:&quot; num</code></li><li>如果能被其他数整除就不是质数——&gt;<code>$num%$i </code>是否等于0    <code>$i=2到​$num-1</code></li><li>如果输入的数是1或者2取模根据上面判断又不符合，所以先排除1和2</li><li>测试序列从2开始，输入的数是4——&gt;得出结果<code>$num</code>不能和<code>$i</code>相等，并且<code>$num</code>不能小于<code>$i</code></li></ol><h4 id="②-落地实现"><a href="#②-落地实现" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><pre><code>powershell#!/bin/env bash#定义变量来保存用户所输入数字read -p &quot;请输入一个正整数字:&quot; number#先排除用户输入的数字1和2[ $number -eq 1 ] &amp;&amp; echo &quot;$number不是质数&quot; &amp;&amp; exit[ $number -eq 2 ] &amp;&amp; echo &quot;$number是质数&quot; &amp;&amp; exit#循环判断用户所输入的数字是否质数for i in `seq 2 $[$number-1]`    do     [ $[$number%$i] -eq 0 ] &amp;&amp; echo &quot;$number不是质数&quot; &amp;&amp; exit    doneecho &quot;$number是质数&quot;</code></pre><p>优化思路：没有必要全部产生2~$[$number-1]序列，只需要产生一半即可。</p><p>更好解决办法：类C风格完美避开了生成序列的坑</p><pre><code>for (( i=2;i&lt;=$[$number-1];i++))do        [ $[$number%$i] -eq 0 ] &amp;&amp; echo &quot;$number不是质数&quot; &amp;&amp; exitdoneecho &quot;$number是质数&quot;</code></pre><h3 id="㈢-批量创建用户"><a href="#㈢-批量创建用户" class="headerlink" title="㈢ 批量创建用户"></a>㈢ 批量创建用户</h3><p><strong>需求：</strong>批量加5个新用户，以u1到u5命名，并统一加一个新组，组名为class,统一改密码为123</p><h4 id="①-思路-2"><a href="#①-思路-2" class="headerlink" title="① 思路"></a>① 思路</h4><ol><li><p>添加用户的命令    <code>useradd -G class</code></p></li><li><p>判断class组是否存在  <code>grep -w ^class /etc/group</code> 或者<code>groupadd class</code></p></li><li><p>根据题意，判断该脚本循环5次来添加用户  <code>for</code></p></li><li><p>给用户设置密码，应该放到循环体里面</p><h4 id="②-落地实现-1"><a href="#②-落地实现-1" class="headerlink" title="② 落地实现"></a>② 落地实现</h4> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment">#判断class组是否存在</span></span><br><span class="line">grep <span class="literal">-w</span> ^<span class="class"><span class="keyword">class</span> /<span class="title">etc</span>/<span class="title">group</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class"><span class="title">test</span> $? -<span class="title">ne</span> 0 &amp;&amp; <span class="title">groupadd</span> <span class="title">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#循环创建用户</span></span><br><span class="line"><span class="class"><span class="title">for</span> ((<span class="title">i</span>=1;<span class="title">i</span>&lt;=5;<span class="title">i</span>++))</span></span><br><span class="line"><span class="class"><span class="title">do</span></span></span><br><span class="line"><span class="class"><span class="title">useradd</span> -<span class="title">G</span> <span class="title">class</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">echo</span> 123|<span class="title">passwd</span> --<span class="title">stdin</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">done</span></span></span><br><span class="line"><span class="class">#用户创建信息保存日志文件</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">**方法一：**  </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#!/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">grep</span> -<span class="title">w</span> <span class="title">class</span> /<span class="title">etc</span>/<span class="title">group</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span>  #判断<span class="title">class</span>组是否存在</span></span><br><span class="line"><span class="class">[ $? -<span class="title">ne</span> 0 ] &amp;&amp; <span class="title">groupadd</span> <span class="title">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">for</span> <span class="title">i</span> <span class="title">in</span></span> &#123;<span class="number">1</span>..<span class="number">5</span>&#125;  <span class="comment">#批量创建5个用户</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">useradd <span class="literal">-G</span> <span class="class"><span class="keyword">class</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">echo</span> 123|<span class="title">passwd</span> --<span class="title">stdin</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">done</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">**方法二：**  </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#!/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="class">#判断<span class="title">class</span>组是否存在</span></span><br><span class="line"><span class="class"><span class="title">cut</span> -<span class="title">d</span>: -<span class="title">f1</span> /<span class="title">etc</span>/<span class="title">group</span>|<span class="title">grep</span> -<span class="title">w</span> <span class="title">class</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class">[ $? -<span class="title">ne</span> 0 ] &amp;&amp; <span class="title">groupadd</span> <span class="title">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#循环增加用户，循环次数5次，<span class="title">for</span>循环,给用户设定密码</span></span><br><span class="line"><span class="class"><span class="title">for</span> ((<span class="title">i</span>=1;<span class="title">i</span>&lt;=5;<span class="title">i</span>++))</span></span><br><span class="line"><span class="class"><span class="title">do</span></span></span><br><span class="line"><span class="class"><span class="title">useradd</span> <span class="title">u</span>$<span class="title">i</span> -<span class="title">G</span> <span class="title">class</span></span></span><br><span class="line"><span class="class"><span class="title">echo</span> 123|<span class="title">passwd</span> --<span class="title">stdin</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">done</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">**方法三：**</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#!/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="class"><span class="title">grep</span> -<span class="title">w</span> <span class="title">class</span> /<span class="title">etc</span>/<span class="title">group</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class"><span class="title">test</span> $? -<span class="title">ne</span> 0 &amp;&amp; <span class="title">groupadd</span> <span class="title">class</span>    </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">或者  </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">groupadd</span> <span class="title">class</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class"><span class="title">for</span> ((<span class="title">i</span>=1;<span class="title">i</span>&lt;=5;<span class="title">i</span>++))</span></span><br><span class="line"><span class="class"><span class="title">do</span></span></span><br><span class="line"><span class="class"><span class="title">useradd</span> -<span class="title">G</span> <span class="title">class</span> <span class="title">u</span>$<span class="title">i</span> &amp;&amp; <span class="title">echo</span> 123|<span class="title">passwd</span> --<span class="title">stdin</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">done</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">### （四）判断局域网内主机网络通讯</span></span><br><span class="line"><span class="class">**需求：**</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">写一个脚本，局域网内，把能<span class="title">ping</span>通的<span class="title">IP</span>和不能<span class="title">ping</span>通的<span class="title">IP</span>分类，并保存到两个文本文件里  </span></span><br><span class="line"><span class="class">以10.1.1.1~10.1.1.10为例</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">```<span class="title">powershell</span></span></span><br><span class="line"><span class="class">10.1.1.1~10.1.1.254</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#!/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="class">#定义变量</span></span><br><span class="line"><span class="class"><span class="title">ip</span>=10.1.1</span></span><br><span class="line"><span class="class">#循环去<span class="title">ping</span>主机的<span class="title">IP</span></span></span><br><span class="line"><span class="class"><span class="title">for</span> ((<span class="title">i</span>=1;<span class="title">i</span>&lt;=10;<span class="title">i</span>++))</span></span><br><span class="line"><span class="class"><span class="title">do</span></span></span><br><span class="line"><span class="class"><span class="title">ping</span> -<span class="title">c1</span> $<span class="title">ip</span>.$<span class="title">i</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class"><span class="title">if</span> [ $? -<span class="title">eq</span> 0 ];<span class="title">then</span></span></span><br><span class="line"><span class="class"><span class="title">echo</span> &quot;$<span class="title">ip</span>.$<span class="title">i</span> <span class="title">is</span> <span class="title">ok</span>&quot; &gt;&gt; /<span class="title">tmp</span>/<span class="title">ip_up</span>.<span class="title">txt</span></span></span><br><span class="line"><span class="class"><span class="title">else</span></span></span><br><span class="line"><span class="class"><span class="title">echo</span> &quot;$<span class="title">ip</span>.$<span class="title">i</span> <span class="title">is</span> <span class="title">down</span>&quot; &gt;&gt; /<span class="title">tmp</span>/<span class="title">ip_down</span>.<span class="title">txt</span></span></span><br><span class="line"><span class="class"><span class="title">fi</span>  </span></span><br></pre></td></tr></table></figure><pre><code> 或者  </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[ $? -eq 0 ] &amp;&amp; echo &quot;$ip.$i is ok&quot; &gt;&gt; &#x2F;tmp&#x2F;ip_up.txt || echo &quot;$ip.$i is down&quot; &gt;&gt; &#x2F;tmp&#x2F;ip_down.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[root@server shell03]# time .&#x2F;ping.sh         </span><br><span class="line"></span><br><span class="line">real    0m24.129s</span><br><span class="line">user    0m0.006s</span><br><span class="line">sys     0m0.005s</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p><strong>延伸扩展：shell脚本并发</strong></p><p>powershell<br>并行执行：<br>{程序}&amp;表示将程序放到后台并行执行，如果需要等待程序执行完毕再进行下面内容，需要加wait</p><pre><code>#!/bin/bash#定义变量ip=10.1.1#循环去ping主机的IPfor ((i=1;i&lt;=10;i++))do&#123;        ping -c1 $ip.$i &amp;&gt;/dev/null        if [ $? -eq 0 ];then                echo &quot;$ip.$i is ok&quot; &gt;&gt; /tmp/ip_up.txt        else                echo &quot;$ip.$i is down&quot; &gt;&gt; /tmp/ip_down.txt        fi&#125;&amp;donewaitecho &quot;ip is ok....&quot;[root@server ~]# time ./ping.sh ip is ok...real    0m3.091suser    0m0.001ssys     0m0.008s</code></pre><h3 id="㈢-判断闰年"><a href="#㈢-判断闰年" class="headerlink" title="㈢ 判断闰年"></a>㈢ 判断闰年</h3><p><strong>需求3：</strong></p><p>输入一个年份，判断是否是润年（能被4整除但不能被100整除，或能被400整除的年份即为闰年）</p><pre><code class="powershell">    #!/bin/bash    read -p &quot;Please input year:(2017)&quot; year    if [ $[$year%4] -eq 0 -a $[$year%100] -ne 0 ];then        echo &quot;$year is leap year&quot;    elif [ $[$year%400] -eq 0 ];then        echo &quot;$year is leap year&quot;    else        echo &quot;$year is not leap year&quot;    fi</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;㈠-列表循环&quot;&gt;&lt;a href=&quot;#㈠-列表循环&quot; class=&quot;headerlink&quot; title=&quot;㈠ 列表循环&quot;&gt;&lt;/a&gt;㈠ 列表循环&lt;/h3&gt;&lt;h4 id=&quot;列表for循环：用于将一组命令执行知的次数&quot;&gt;&lt;a href=&quot;#列表for循环：用于将一组命令执行知的次数&quot; class=&quot;headerlink&quot; title=&quot;列表for循环：用于将一组命令执行知的次数&quot;&gt;&lt;/a&gt;列表for循环：用于将一组命令执行知的次数&lt;/h4&gt;&lt;h4 id=&quot;基本语法格式&quot;&gt;&lt;a href=&quot;#基本语法格式&quot; class=&quot;headerlink&quot; title=&quot;基本语法格式&quot;&gt;&lt;/a&gt;基本语法格式&lt;/h4&gt;</summary>
    
    
    
    <category term="shell" scheme="http://example.com/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>shell变量定义</title>
    <link href="http://example.com/2020/10/20/shell%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://example.com/2020/10/20/shell%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89/</id>
    <published>2020-10-20T12:26:06.000Z</published>
    <updated>2020-11-13T06:06:13.932Z</updated>
    
    <content type="html"><![CDATA[<p>① Shell的基本语法结构</p><p>  如：变量定义、条件判断、循环语句(for、until、while)、分支语句、函数和数组等； </p><p>  ② 基本正则表达式的运用;</p><p>  ③ 文件处理三剑客：grep、sed、awk工具的使用；</p><a id="more"></a><h1 id="一、SHELL介绍"><a href="#一、SHELL介绍" class="headerlink" title="一、SHELL介绍"></a>一、SHELL介绍</h1><p><strong>前言：</strong></p><p>计算机只能认识（识别）机器语言(0和1)，如（11000000 这种）。但是，我们的程序猿们不能直接去写01这样的代码，所以，要想将程序猿所开发的代码在计算机上运行，就必须找”人”（工具）来翻译成机器语言，这个”人”(工具)就是我们常常所说的<strong>编译器</strong>或者<strong>解释器</strong>。</p><h2 id="1-编程语言分类"><a href="#1-编程语言分类" class="headerlink" title="1. 编程语言分类"></a>1. 编程语言分类</h2><ul><li><strong>编译型语言：</strong></li></ul><p>​    程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如C、C++</p><ul><li><strong>解释型语言：</strong></li></ul><p>​    程序不需要编译，程序在运行时由<strong>解释器</strong>翻译成机器语言，每执行一次都要翻译一次。因此效率比较低。比如Python/JavaScript/ Perl /ruby/Shell等都是解释型语言。</p><ul><li><strong>总结</strong></li></ul><p>编译型语言比解释型语言速度较快，但是不如解释型语言跨平台性好。如果做底层开发或者大型应用程序或者操作系开发一般都用编译型语言；如果是一些服务器脚本及一些辅助的接口，对速度要求不高、对各个平台的兼容性有要求的话则一般都用解释型语言。</p><p>##2. shell简介</p><p><strong>总结：</strong></p><ul><li>shell就是人机交互的一个桥梁</li><li>shell的种类</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># cat /etc/shells   </span></span><br><span class="line"></span><br><span class="line">/bin/sh    &amp;emsp;<span class="comment">#是bash的一个快捷方式  </span></span><br><span class="line"></span><br><span class="line">/bin/bash&amp;emsp;<span class="comment">#bash是大多数Linux默认的shell，包含的功能几乎可以涵盖shell所有的功能  </span></span><br><span class="line"></span><br><span class="line">/sbin/nologin&amp;emsp;<span class="comment">#表示非交互，不能登录操作系统  </span></span><br><span class="line"></span><br><span class="line">/bin/dash&amp;emsp;<span class="comment">#小巧，高效，功能相比少一些</span></span><br><span class="line"></span><br><span class="line">/bin/csh&amp;emsp;<span class="comment">#具有C语言风格的一种shell，具有许多特性，但也有一些缺陷  </span></span><br><span class="line"></span><br><span class="line">/bin/tcsh&amp;emsp;<span class="comment">#是csh的增强版，完全兼容csh</span></span><br></pre></td></tr></table></figure><h2 id="3-shell脚本"><a href="#3-shell脚本" class="headerlink" title="3. shell脚本"></a>3. shell脚本</h2><h3 id="㈠-什么是shell脚本？"><a href="#㈠-什么是shell脚本？" class="headerlink" title="㈠ 什么是shell脚本？"></a>㈠ 什么是shell脚本？</h3><ul><li>一句话概括</li></ul><p>简单来说就是将需要执行的命令保存到文本中，按照顺序执行。它是解释型的，意味着不需要编译。</p><ul><li>准确叙述</li></ul><p><strong>若干命令 + 脚本的基本格式 + 脚本特定语法 + 思想= shell脚本</strong></p><h3 id="㈡-什么时候用到脚本"><a href="#㈡-什么时候用到脚本" class="headerlink" title="㈡ 什么时候用到脚本?"></a>㈡ 什么时候用到脚本?</h3><p><strong>重复化</strong>、复杂化的工作，通过把工作的命令写成脚本，以后仅仅需要执行脚本就能完成这些工作。</p><h3 id="㈢-shell脚本能干啥"><a href="#㈢-shell脚本能干啥" class="headerlink" title="㈢ shell脚本能干啥?"></a>㈢ shell脚本能干啥?</h3><p> ①自动化软件部署             &emsp;LAMP/LNMP/Tomcat…    </p><p> ②自动化管理                 &emsp;系统初始化脚本、批量更改主机密码、推送公钥…</p><p> ③自动化分析处理             &emsp;统计网站访问量</p><p> ④自动化备份                &emsp;数据库备份、日志转储…</p><p> ⑤自动化监控脚本             &emsp;</p><h3 id="㈣-shell脚本的基本写法"><a href="#㈣-shell脚本的基本写法" class="headerlink" title="㈣  shell脚本的基本写法"></a>㈣  shell脚本的基本写法</h3><p>1）<strong>脚本第一行</strong>，魔法字符**#!**指定解释器【必写】</p><p><code>#!/bin/bash</code>  表示以下内容使用bash解释器解析  </p><p><strong>注意：</strong><br>如果直接将解释器路径写死在脚本里，可能在某些系统就会存在找不到解释器的兼容性问题，所以可以使用:<code>#!/bin/env 解释器</code></p><p>2）<strong>脚本第二部分</strong>，注释(#号)说明，对脚本的基本信息进行描述【可选】</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下内容是对脚本的基本信息的描述</span></span><br><span class="line"><span class="comment"># Name: 名字</span></span><br><span class="line"><span class="comment"># Desc:描述describe</span></span><br><span class="line"><span class="comment"># Path:存放路径</span></span><br><span class="line"><span class="comment"># Usage:用法</span></span><br><span class="line"><span class="comment"># Update:更新时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面就是脚本的具体内容</span></span><br><span class="line">commands</span><br></pre></td></tr></table></figure><p>3）<strong>脚本第三部分</strong>，脚本要实现的具体代码内容</p><h3 id="（五）-shell脚本的执行方法"><a href="#（五）-shell脚本的执行方法" class="headerlink" title="（五） shell脚本的执行方法"></a>（五） shell脚本的执行方法</h3><ul><li>标准脚本执行方法（建议）</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 编写人生第一个shell脚本</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell01</span>]<span class="comment"># cat first_shell.sh</span></span><br></pre></td></tr></table></figure><pre><code>#!/bin/env bash# 以下内容是对脚本的基本信息的描述# Name: first_shell.sh# Desc: num1# Path: /shell01/first_shell.sh# Usage:/shell01/first_shell.sh# Update:2019-05-05echo &quot;hello world&quot;echo &quot;hello world&quot;echo &quot;hello world&quot;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">2) 脚本增加可执行权限</span><br><span class="line">&#96;[root@MissHou shell01]# chmod +x first_shell.sh&#96;</span><br><span class="line"></span><br><span class="line">3) 标准方式执行脚本</span><br><span class="line">&#96;[root@MissHou shell01]# pwd&#96;</span><br><span class="line">&#96;&#x2F;shell01&#96;</span><br><span class="line">&#96;[root@MissHou shell01]# &#x2F;shell01&#x2F;first_shell.sh&#96;</span><br><span class="line">或者</span><br><span class="line">&#96;[root@MissHou shell01]# .&#x2F;first_shell.sh&#96;</span><br><span class="line"></span><br><span class="line">注意：标准执行方式脚本必须要有可执行权限。</span><br><span class="line"></span><br><span class="line">- 非标准的执行方法（不建议）</span><br><span class="line"></span><br><span class="line">1. 直接在命令行指定解释器执行</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;powershell</span><br><span class="line">[root@MissHou shell01]# bash first_shell.sh</span><br><span class="line">[root@MissHou shell01]# sh first_shell.sh</span><br><span class="line">[root@MissHou shell01]# bash -x first_shell.sh</span><br><span class="line">+ echo &#39;hello world&#39;</span><br><span class="line">hello world</span><br><span class="line">+ echo &#39;hello world&#39;</span><br><span class="line">hello world</span><br><span class="line">+ echo &#39;hello world&#39;</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p><code>-x</code>:一般用于排错，查看脚本的执行过程<br><code>-n</code>:用来查看脚本的语法是否有问题</p><ol start="2"><li>使用<code>source</code>命令读取脚本文件,执行文件里的代码<br>powershell  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@MissHou shell01]# source first_shell.sh</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></li></ol><h1 id="二、变量的定义"><a href="#二、变量的定义" class="headerlink" title="二、变量的定义"></a>二、变量的定义</h1><h2 id="1-变量是什么？"><a href="#1-变量是什么？" class="headerlink" title="1. 变量是什么？"></a>1. 变量是什么？</h2><ul><li>一句话概括：变量是用来临时保存数据的，该数据是可以变化的数据。</li></ul><h2 id="2-什么时候需要定义变量？"><a href="#2-什么时候需要定义变量？" class="headerlink" title="2. 什么时候需要定义变量？"></a>2. 什么时候需要定义变量？</h2><ul><li>如果某个内容需要多次使用，并且在代码中<strong>重复出现</strong>，那么可以用变量代表该内容。这样在修改内容的时候，仅仅需要修改变量的值。</li><li>在代码运作的过程中，可能会把某些命令的执行结果保存起来，后续代码需要使用这些结果，就可以直接使用这个变量。</li></ul><h2 id="3-变量如何定义？"><a href="#3-变量如何定义？" class="headerlink" title="3.变量如何定义？"></a>3.变量如何定义？</h2><p><strong>变量名-变量值</strong></p><ul><li><p>变量名：用来临时保存数据的</p></li><li><p>变量值：就是临时的可变化的数据</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=hello定义变量A</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A调用变量A，要给钱的，不是人民币是美元&quot;$&quot;</span></span><br><span class="line">hello</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;A&#125;还可以这样调用，不管你的姿势多优雅，总之要给钱</span></span><br><span class="line">hello</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=world因为是变量所以可以变，移情别恋是常事</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A不管你是谁，只要调用就要给钱</span></span><br><span class="line">world</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># unset A不跟你玩了，取消变量</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A从此，我单身了，你可以给我介绍任何人</span></span><br></pre></td></tr></table></figure><h2 id="4-变量的定义规则"><a href="#4-变量的定义规则" class="headerlink" title="4. 变量的定义规则"></a>4. 变量的定义规则</h2><p>虽然可以给变量（变量名）赋予任何值；但是，对于==变量名==也是要求的！:unamused:</p><h3 id="㈠-变量名区分大小写"><a href="#㈠-变量名区分大小写" class="headerlink" title="㈠ 变量名区分大小写"></a>㈠ 变量名区分大小写</h3><p>owershell  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@MissHou ~]# A&#x3D;hello</span><br><span class="line">[root@MissHou ~]# a&#x3D;world</span><br><span class="line">[root@MissHou ~]# echo $A</span><br><span class="line">hello</span><br><span class="line">[root@MissHou ~]# echo $a</span><br><span class="line">world</span><br></pre></td></tr></table></figure><h3 id="㈡-变量名不能有特殊符号"><a href="#㈡-变量名不能有特殊符号" class="headerlink" title="㈡ 变量名不能有特殊符号"></a>㈡ 变量名不能有特殊符号</h3><p>powershell  </p><pre><code>    [root@MissHou ~]# *A=hello    -bash: *A=hello: command not found    [root@MissHou ~]# ?A=hello    -bash: ?A=hello: command not found    [root@MissHou ~]# @A=hello    -bash: @A=hello: command not found    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">特别说明：对于有空格的字符串给变量赋值时，要用引号引起来&#96;&#96;&#96;</span><br><span class="line">[root@MissHou ~]# A&#x3D;hello world</span><br><span class="line">-bash: world: command not found</span><br><span class="line">[root@MissHou ~]# A&#x3D;&quot;hello world&quot;</span><br><span class="line">[root@MissHou ~]# A&#x3D;&#39;hello world&#39;</span><br><span class="line"></span><br><span class="line">### ㈢ 变量名不能以数字开头</span><br><span class="line">&#96;&#96;&#96;powershell  </span><br><span class="line"></span><br><span class="line">[root@MissHou ~]# 1A&#x3D;hello</span><br><span class="line">-bash: 1A&#x3D;hello: command not found</span><br><span class="line">[root@MissHou ~]# A1&#x3D;hello</span><br><span class="line"></span><br><span class="line">注意：不能以数字开头并不代表变量名中不能包含数字呦。</span><br></pre></td></tr></table></figure></code></pre><h3 id="㈣-等号两边不能有任何空格"><a href="#㈣-等号两边不能有任何空格" class="headerlink" title="㈣ 等号两边不能有任何空格"></a>㈣ 等号两边不能有任何空格</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A =123</span></span><br><span class="line"><span class="literal">-bash</span>: A: command not found</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A= 123</span></span><br><span class="line"><span class="literal">-bash</span>: <span class="number">123</span>: command not found</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A = 123</span></span><br><span class="line"><span class="literal">-bash</span>: A: command not found</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=123</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="㈤-变量名尽量做到见名知意"><a href="#㈤-变量名尽量做到见名知意" class="headerlink" title="㈤ 变量名尽量做到见名知意"></a>㈤ 变量名尽量做到见名知意</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NTP_IP=<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="built_in">DIR</span>=/u01/app1</span><br><span class="line">TMP_FILE=/var/log/<span class="number">1</span>.log</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>说明：一般变量名使用大写（小写也可以），不要同一个脚本中变量全是a,b,c等不容易阅读</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">## 5. 变量的定义方式有哪些？</span><br><span class="line"></span><br><span class="line">### ㈠ 基本方式</span><br><span class="line"></span><br><span class="line">&gt; 直接赋值给一个变量</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;powershell  </span><br><span class="line"></span><br><span class="line">[root@MissHou ~]# A&#x3D;1234567</span><br><span class="line">[root@MissHou ~]# echo $A</span><br><span class="line">1234567</span><br><span class="line">[root@MissHou ~]# echo $&#123;A:2:4&#125;表示从A变量中第3个字符开始截取，截取4个字符</span><br><span class="line">3456</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">$变量名 和 $&#123;变量名&#125;的异同</span><br><span class="line">相同点：都可以调用变量</span><br><span class="line">不同点：$&#123;变量名&#125;可以只截取变量的一部分，而$变量名不可以</span><br></pre></td></tr></table></figure><h3 id="㈡-命令执行结果赋值给变量"><a href="#㈡-命令执行结果赋值给变量" class="headerlink" title="㈡ 命令执行结果赋值给变量"></a>㈡ 命令执行结果赋值给变量</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># B=`date +%F`</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $B</span></span><br><span class="line"><span class="number">2019</span><span class="literal">-04</span><span class="literal">-16</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># C=$(uname -r)</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $C</span></span><br><span class="line"><span class="number">2.6</span>.<span class="number">32</span><span class="literal">-696</span>.el6.x86_64</span><br></pre></td></tr></table></figure><h3 id="㈢-交互式定义变量-read"><a href="#㈢-交互式定义变量-read" class="headerlink" title="㈢ 交互式定义变量(read)"></a>㈢ 交互式定义变量(read)</h3><p><strong>目的：</strong>让==用户自己==给变量赋值，比较灵活。</p><p><strong>语法：</strong><code>read [选项] 变量名</code></p><p><strong>常见选项：</strong></p><table><thead><tr><th>选项</th><th>释义</th></tr></thead><tbody><tr><td>-p</td><td>定义提示用户的信息</td></tr><tr><td>-n</td><td>定义字符数（限制变量值的长度）</td></tr><tr><td>-s</td><td>不显示（不显示用户输入的内容）</td></tr><tr><td>-t</td><td>定义超时时间，默认单位为秒（限制用户输入变量值的超时时间）</td></tr></tbody></table><p><strong>举例说明：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">用法<span class="number">1</span>：用户自己定义变量值  </span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># read name</span></span><br><span class="line">harry</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $name</span></span><br><span class="line">harry</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># read -p &quot;Input your name:&quot; name</span></span><br><span class="line">Input your name:tom</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $name</span></span><br><span class="line">tom</span><br><span class="line"></span><br><span class="line">用法<span class="number">2</span>：变量值来自文件  </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># cat 1.txt </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span> <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># read ip mask &lt; 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $ip</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $mask</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br></pre></td></tr></table></figure><h3 id="㈣-定义有类型的变量-declare"><a href="#㈣-定义有类型的变量-declare" class="headerlink" title="㈣ 定义有类型的变量(declare)"></a>㈣ 定义有类型的变量(declare)</h3><p><strong>目的：</strong>给变量做一些限制，固定变量的类型，比如：整型、只读</p><p><strong>用法：</strong><code>declare 选项 变量名=变量值</code></p><p><strong>常用选项：</strong></p><table><thead><tr><th>选项</th><th>释义</th><th>举例</th></tr></thead><tbody><tr><td>-i</td><td>将变量看成整数</td><td>declare -i A=123</td></tr><tr><td>-r</td><td>定义只读变量</td><td>declare -r B=hello</td></tr><tr><td>-a</td><td>定义普通数组；查看普通数组</td><td></td></tr><tr><td>-A</td><td>定义关联数组；查看关联数组</td><td></td></tr><tr><td>-x</td><td>将变量通过环境导出</td><td>declare -x AAA=123456 等于 export AAA=123456</td></tr></tbody></table><p><strong>举例说明：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># declare -i A=123</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=hello</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># declare -r B=hello</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $B</span></span><br><span class="line">hello</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># B=world</span></span><br><span class="line"><span class="literal">-bash</span>: B: readonly variable</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># unset B</span></span><br><span class="line"><span class="literal">-bash</span>: unset: B: cannot unset: readonly variable</span><br></pre></td></tr></table></figure><h2 id="6-变量的分类"><a href="#6-变量的分类" class="headerlink" title="6. 变量的分类"></a>6. 变量的分类</h2><h3 id="㈠-本地变量"><a href="#㈠-本地变量" class="headerlink" title="㈠ 本地变量"></a>㈠ 本地变量</h3><ul><li>**==本地变量==**：当前用户自定义的变量。当前进程中有效，其他进程及当前进程的子进程无效。</li></ul><h3 id="㈡-环境变量"><a href="#㈡-环境变量" class="headerlink" title="㈡ 环境变量"></a>㈡ 环境变量</h3><ul><li><p><strong>环境变量</strong>：当前进程有效，并且能够被<strong>子进程</strong>调用。  </p><p> <code>env</code>查看当前用户的环境变量<br> <code>set</code>查询当前用户的所有变量(临时变量与环境变量)<br> <code>export 变量名=变量值</code>    或者  <code>变量名=变量值；export 变量名</code></p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># export A=hello  临时将一个本地变量（临时变量）变成环境变量</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># env|grep ^A</span></span><br><span class="line">A=hello</span><br><span class="line"></span><br><span class="line">永久生效：</span><br><span class="line">vim /etc/profile 或者 ~/.bashrc</span><br><span class="line">export A=hello</span><br><span class="line">或者</span><br><span class="line">A=hello</span><br><span class="line">export A</span><br><span class="line"></span><br><span class="line">说明：系统中有一个变量PATH，环境变量</span><br><span class="line">export PATH=/usr/local/mysql/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h3 id="㈢-全局变量"><a href="#㈢-全局变量" class="headerlink" title="㈢ 全局变量"></a>㈢ 全局变量</h3><ul><li><p><strong>全局变量</strong>：全局所有的用户和程序都能调用，且继承，新建的用户也默认能调用.</p></li><li><p><strong>解读相关配置文件</strong></p></li></ul><table><thead><tr><th>文件名</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>$HOME/.bashrc</td><td>当前用户的bash信息,用户==登录==时读取</td><td>定义别名、umask、函数等</td></tr><tr><td>$HOME/.bash_profile</td><td>当前用户的环境变量，用户==登录==时读取</td><td></td></tr><tr><td>$HOME/.bash_logout</td><td>当前用户==退出==当前shell时最后读取</td><td>定义用户退出时执行的程序等</td></tr><tr><td>/etc/bashrc</td><td>全局的bash信息，所有用户都生效</td><td></td></tr><tr><td>/etc/profile</td><td>全局环境变量信息</td><td>系统和所有用户都生效</td></tr><tr><td>$HOME/.bash_history</td><td>用户的历史命令</td><td>history -w   保存历史记录         history -c  清空历史记录</td></tr></tbody></table><p><strong>说明：</strong>以上文件修改后，都需要重新==source==让其生效或者退出重新登录。</p><ul><li><strong>用户登录</strong>系统<strong>读取</strong>相关==文件的顺序==<ol><li><code>/etc/profile</code></li><li><code>$HOME/.bash_profile</code></li><li><code>$HOME/.bashrc</code></li><li><code>/etc/bashrc</code></li><li><code>$HOME/.bash_logout</code></li></ol></li></ul><h3 id="㈣-系统变量"><a href="#㈣-系统变量" class="headerlink" title="㈣ 系统变量"></a>㈣ 系统变量</h3><ul><li><strong>系统变量(内置bash中变量)</strong> ： shell本身已经固定好了它的名字和作用.</li></ul><table><thead><tr><th>内置变量</th><th>含义</th></tr></thead><tbody><tr><td>$?</td><td>上一条命令执行后返回的状态；状态值为0表示执行正常，==非0==表示执行异常或错误</td></tr><tr><td>$0</td><td>当前执行的程序或脚本名</td></tr><tr><td>$#</td><td>脚本后面接的参数的个数</td></tr><tr><td>$*</td><td>脚本后面所有参数，参数当成一个整体输出，每一个变量参数之间以空格隔开</td></tr><tr><td>$@</td><td>脚本后面所有参数，参数是独立的，也是全部输出</td></tr><tr><td>$1~$9</td><td>脚本后面的位置参数，$1表示第1个位置参数，依次类推</td></tr><tr><td>${10}~${n}</td><td>扩展位置参数,第10个位置变量必须用{}大括号括起来(2位数字以上扩起来)</td></tr><tr><td>$$</td><td>当前所在进程的进程号，如<code>echo $$</code></td></tr><tr><td>$！</td><td>后台运行的最后一个进程号 (当前终端）</td></tr><tr><td>!$</td><td>调用最后一条命令历史中的参数</td></tr></tbody></table><ul><li>进一步了解位置参数<code>$1~$&#123;n&#125;</code></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#了解shell内置变量中的位置参数含义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\<span class="variable">$0</span> = <span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\<span class="variable">$</span># = <span class="variable">$</span>#&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\<span class="variable">$</span>* = <span class="variable">$</span>*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\<span class="variable">$</span>@ = <span class="variable">$</span>@&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\<span class="variable">$1</span> = <span class="variable">$1</span>&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\<span class="variable">$2</span> = <span class="variable">$2</span>&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\<span class="variable">$3</span> = <span class="variable">$3</span>&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\<span class="variable">$11</span> = <span class="variable">$</span>&#123;11&#125;&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\<span class="variable">$12</span> = <span class="variable">$</span>&#123;12&#125;&quot;</span> </span><br></pre></td></tr></table></figure><ul><li>进一步了解$*和​$@的区别</li></ul><p><code>$*</code>：表示将变量看成一个整体<br><code>$@</code>：表示变量是独立的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$</span>@&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;======我是分割线=======&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$</span>*&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># bash 3.sh a b c</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">======我是分割线=======</span><br><span class="line">a b c</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;① Shell的基本语法结构&lt;/p&gt;
&lt;p&gt;  如：变量定义、条件判断、循环语句(for、until、while)、分支语句、函数和数组等； &lt;/p&gt;
&lt;p&gt;  ② 基本正则表达式的运用;&lt;/p&gt;
&lt;p&gt;  ③ 文件处理三剑客：grep、sed、awk工具的使用；&lt;/p&gt;</summary>
    
    
    
    <category term="shell" scheme="http://example.com/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>shell-case语句</title>
    <link href="http://example.com/2020/10/18/%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2020/10/18/%E5%87%BD%E6%95%B0/</id>
    <published>2020-10-18T06:26:50.000Z</published>
    <updated>2020-11-14T07:26:13.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="1-什么是函数？"><a href="#1-什么是函数？" class="headerlink" title="1. 什么是函数？"></a>1. 什么是函数？</h2><ul><li>shell中允许将<strong>一组命令集合</strong>或<strong>语句</strong>形成一段<strong>可用代码</strong>，这些代码块称为shell函数</li><li>给这段代码起个名字称为函数名，后续可以直接调用该段代码的功能</li></ul><h2 id="2-如何定义函数？"><a href="#2-如何定义函数？" class="headerlink" title="2. 如何定义函数？"></a>2. 如何定义函数？</h2><p><strong>方法1：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数名()</span><br><span class="line">&#123;</span><br><span class="line">  函数体（一堆命令的集合，来实现某个功能）   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名<span class="params">()</span></span></span><br><span class="line">&#123;</span><br><span class="line">   函数体（一堆命令的集合，来实现某个功能）</span><br><span class="line">   <span class="built_in">echo</span> hello</span><br><span class="line">   <span class="built_in">echo</span> world</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>函数中return说明:</strong></p><ol><li>return可以结束一个函数。类似于循环控制语句break(结束当前循环，执行循环体后面的代码)。</li><li>return默认返回函数中最后一个命令状态值，也可以给定参数值，范围是0-256之间。</li><li>如果没有return命令，函数将返回最后一个指令的退出状态值。</li></ol><h2 id="3-函数如何调用？"><a href="#3-函数如何调用？" class="headerlink" title="3. 函数如何调用？"></a>3. 函数如何调用？</h2><h3 id="㈠-当前命令行调用"><a href="#㈠-当前命令行调用" class="headerlink" title="㈠ 当前命令行调用"></a>㈠ 当前命令行调用</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># cat fun1.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">hello()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello lilei <span class="variable">$1</span>&quot;</span></span><br><span class="line">hostname</span><br><span class="line">&#125;</span><br><span class="line">menu()&#123;</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line"><span class="number">1</span>. mysql</span><br><span class="line"><span class="number">2</span>. web</span><br><span class="line"><span class="number">3</span>. app</span><br><span class="line"><span class="number">4</span>. <span class="keyword">exit</span></span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># source fun1.sh </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># . fun1.sh </span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># hello 888</span></span><br><span class="line">hello lilei <span class="number">888</span></span><br><span class="line">MissHou.itcast.cc</span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell04</span>]<span class="comment"># menu</span></span><br><span class="line"><span class="number">1</span>. mysql</span><br><span class="line"><span class="number">2</span>. web</span><br><span class="line"><span class="number">3</span>. app</span><br><span class="line"><span class="number">4</span>. <span class="keyword">exit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="㈡-定义到用户的环境变量中"><a href="#㈡-定义到用户的环境变量中" class="headerlink" title="㈡ 定义到用户的环境变量中"></a>㈡ 定义到用户的环境变量中</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> <span class="type">shell05</span>]<span class="comment"># vim ~/.bashrc </span></span><br><span class="line">文件中增加如下内容：</span><br><span class="line">hello()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello lilei <span class="variable">$1</span>&quot;</span></span><br><span class="line">hostname</span><br><span class="line">&#125;</span><br><span class="line">menu()&#123;</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line"><span class="number">1</span>. mysql</span><br><span class="line"><span class="number">2</span>. web</span><br><span class="line"><span class="number">3</span>. app</span><br><span class="line"><span class="number">4</span>. <span class="keyword">exit</span></span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：当用户打开bash的时候会读取该文件</p><h3 id="㈢-脚本中调用"><a href="#㈢-脚本中调用" class="headerlink" title="㈢ 脚本中调用"></a>㈢ 脚本中调用</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#打印菜单</span></span><br><span class="line">source ./fun1.sh</span><br><span class="line">menu()&#123;</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="literal">-END</span></span><br><span class="line"><span class="built_in">h</span>显示命令帮助</span><br><span class="line">f显示磁盘分区</span><br><span class="line">d显示磁盘挂载</span><br><span class="line">m查看内存使用</span><br><span class="line">u查看系统负载</span><br><span class="line">q退出程序</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">&#125;</span><br><span class="line">menu//调用函数</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-应用案例"><a href="#4-应用案例" class="headerlink" title="4. 应用案例"></a>4. 应用案例</h2><p><strong>具体需求：</strong></p><ol><li>写一个脚本收集用户输入的基本信息(姓名，性别，年龄)，如不输入一直提示输入</li><li>最后根据用户的信息输出相对应的内容</li></ol><p><strong>思路：</strong></p><ol><li><p>交互式定义多个变量来保存用户信息  姓名、性别、年龄</p></li><li><p>如果不输一直提示输入  </p><ul><li>循环直到输入字符串不为空  while  判断输入字符串是否为空</li><li>每个信息都必须不能为空，该功能可以定义为一个函数，方便下面脚本调用</li></ul></li><li><p>根据用户输入信息做出匹配判断</p></li></ol><p><strong>代码实现：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#该函数实现用户如果不输入内容则一直循环直到用户输入为止，并且将用户输入的内容打印出来</span></span><br><span class="line">input_fun()</span><br><span class="line">&#123;</span><br><span class="line">  input_var=<span class="string">&quot;&quot;</span></span><br><span class="line">  output_var=<span class="variable">$1</span></span><br><span class="line">  <span class="keyword">while</span> [ -<span class="type">z</span> <span class="variable">$input_var</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;<span class="variable">$output_var</span>&quot;</span> input_var</span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$input_var</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input_fun 请输入你的姓名:</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">fun()</span><br><span class="line">&#123;</span><br><span class="line">read -p &quot;$1&quot; var</span><br><span class="line">if [ -z $var ];then</span><br><span class="line">fun $1</span><br><span class="line">else</span><br><span class="line">echo $var</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#调用函数并且获取用户的姓名、性别、年龄分别赋值给name、sex、age变量</span><br><span class="line">name&#x3D;$(input_fun 请输入你的姓名:)</span><br><span class="line">sex&#x3D;$(input_fun 请输入你的性别:)</span><br><span class="line">age&#x3D;$(input_fun 请输入你的年龄:)</span><br><span class="line"></span><br><span class="line">#根据用户输入的性别进行匹配判断</span><br><span class="line">case $sex in</span><br><span class="line">man)</span><br><span class="line">if [ $age -gt 18 -a $age -le 35 ];then</span><br><span class="line">echo &quot;中年大叔你油腻了吗？加油&quot;</span><br><span class="line">elif [ $age -gt 35 ];then</span><br><span class="line">echo &quot;保温杯里泡枸杞&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;年轻有为。。。&quot;</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">woman)</span><br><span class="line">xxx</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">xxx</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><strong>扩展延伸：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">描述以下代码含义：</span><br><span class="line">:()</span><br><span class="line">&#123;</span><br><span class="line">   :|:&amp;</span><br><span class="line">&#125;</span><br><span class="line">:</span><br></pre></td></tr></table></figure><h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><h2 id="1-任务背景"><a href="#1-任务背景" class="headerlink" title="1. 任务背景"></a>1. 任务背景</h2><p>现有的跳板机虽然实现了统一入口来访问生产服务器，yunwei用户权限太大可以操作跳板机上的所有目录文件，存在数据被误删的安全隐患，所以希望你做一些安全策略来保证跳板机的正常使用。</p><h2 id="2-具体要求"><a href="#2-具体要求" class="headerlink" title="2. 具体要求"></a>2. 具体要求</h2><ol><li>只允许yunwei用户通过跳板机远程连接后台的应用服务器做一些维护操作</li><li>公司运维人员远程通过yunwei用户连接跳板机时，跳出以下菜单供选择：</li></ol><p>powershell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">欢迎使用Jumper-server，请选择你要操作的主机：</span><br><span class="line">1. DB1-Master</span><br><span class="line">2. DB2-Slave</span><br><span class="line">3. Web1</span><br><span class="line">4. Web2</span><br><span class="line">h. help</span><br><span class="line">q. exit</span><br></pre></td></tr></table></figure><ol start="3"><li>当用户选择相应主机后，直接<strong>免密码登录</strong>成功</li><li>如果用户不输入一直提示用户输入，直到用户选择退出</li></ol><h2 id="3-综合分析"><a href="#3-综合分析" class="headerlink" title="3. 综合分析"></a>3. 综合分析</h2><ol><li>将脚本放到yunwei用户家目录里的.bashrc文件里（/shell05/jumper-server.sh）</li><li>将菜单定义为一个函数[打印菜单]，方便后面调用</li><li>用case语句来实现用户的选择【交互式定义变量】</li><li>当用户选择了某一台服务器后，进一步询问用户需要做的事情  case…esac  交互式定义变量</li><li>使用循环来实现用户不选择一直让其选择</li><li>限制用户退出后直接关闭终端  exit </li></ol><h2 id="4-落地实现"><a href="#4-落地实现" class="headerlink" title="4. 落地实现"></a>4. 落地实现</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># jumper-server</span></span><br><span class="line"><span class="comment"># 定义菜单打印功能的函数</span></span><br><span class="line">menu()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">欢迎使用Jumper<span class="literal">-server</span>，请选择你要操作的主机：</span><br><span class="line"><span class="number">1</span>. DB1<span class="literal">-Master</span></span><br><span class="line"><span class="number">2</span>. DB2<span class="literal">-Slave</span></span><br><span class="line"><span class="number">3</span>. Web1</span><br><span class="line"><span class="number">4</span>. Web2</span><br><span class="line"><span class="built_in">h</span>. help</span><br><span class="line">q. <span class="keyword">exit</span></span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 屏蔽以下信号</span></span><br><span class="line"><span class="keyword">trap</span> <span class="string">&#x27;&#x27;</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">19</span></span><br><span class="line"><span class="comment"># 调用函数来打印菜单</span></span><br><span class="line">menu</span><br><span class="line"><span class="comment">#循环等待用户选择</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 菜单选择，case...esac语句</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请选择你要访问的主机:&quot;</span> host</span><br><span class="line">case <span class="variable">$host</span> <span class="keyword">in</span></span><br><span class="line"><span class="number">1</span>)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">;;</span><br><span class="line"><span class="number">2</span>)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.2</span></span><br><span class="line">;;</span><br><span class="line"><span class="number">3</span>)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.3</span></span><br><span class="line">;;</span><br><span class="line"><span class="built_in">h</span>)</span><br><span class="line"><span class="built_in">clear</span>;menu</span><br><span class="line">;;</span><br><span class="line">q)</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line">将脚本放到yunwei用户家目录里的.bashrc里执行：</span><br><span class="line">bash ~/jumper<span class="literal">-server</span>.sh</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p><strong>进一步完善需求</strong></p><p>为了进一步增强跳板机的安全性，工作人员通过跳板机访问生产环境，但是不能在跳板机上停留。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#公钥推送成功</span></span><br><span class="line"><span class="keyword">trap</span> <span class="string">&#x27;&#x27;</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">19</span></span><br><span class="line"><span class="comment">#打印菜单用户选择</span></span><br><span class="line">menu()&#123;</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">欢迎使用Jumper<span class="literal">-server</span>，请选择你要操作的主机：</span><br><span class="line"><span class="number">1</span>. DB1<span class="literal">-Master</span></span><br><span class="line"><span class="number">2</span>. DB2<span class="literal">-Slave</span></span><br><span class="line"><span class="number">3</span>. Web1</span><br><span class="line"><span class="number">4</span>. Web2</span><br><span class="line"><span class="built_in">h</span>. help</span><br><span class="line">q. <span class="keyword">exit</span></span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用函数来打印菜单</span></span><br><span class="line">menu</span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入你要选择的主机[h for help]：&quot;</span> host</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过case语句来匹配用户所输入的主机</span></span><br><span class="line">case <span class="variable">$host</span> <span class="keyword">in</span></span><br><span class="line"><span class="number">1</span>|DB1)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">;;</span><br><span class="line"><span class="number">2</span>|DB2)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.2</span></span><br><span class="line">;;</span><br><span class="line"><span class="number">3</span>|web1)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.250</span></span><br><span class="line">;;</span><br><span class="line"><span class="built_in">h</span>|help)</span><br><span class="line"><span class="built_in">clear</span>;menu</span><br><span class="line">;;</span><br><span class="line">q|quit)</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>自己完善功能：</p><ol><li>用户选择主机后，需要事先推送公钥；如何判断公钥是否已推</li><li>比如选择web1时，再次提示需要做的操作，比如：<br>clean log<br>重启服务<br>kill某个进程</li></ol><p><strong>回顾信号：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) SIGHUP 重新加载配置    </span><br><span class="line"><span class="number">2</span>) SIGINT键盘中断^C</span><br><span class="line"><span class="number">3</span>) SIGQUIT      键盘退出</span><br><span class="line"><span class="number">9</span>) SIGKILL 强制终止</span><br><span class="line"><span class="number">15</span>) SIGTERM    终止（正常结束），缺省信号</span><br><span class="line"><span class="number">18</span>) SIGCONT       继续</span><br><span class="line"><span class="number">19</span>) SIGSTOP       停止</span><br><span class="line"><span class="number">20</span>) SIGTSTP     暂停^Z</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;1-什么是函数？&quot;&gt;&lt;a href=&quot;#1-什么是函数？&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是函数？</summary>
      
    
    
    
    <category term="Shell" scheme="http://example.com/categories/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>shell-case语句</title>
    <link href="http://example.com/2020/10/16/shell%E7%BC%96%E7%A8%8Bcase/"/>
    <id>http://example.com/2020/10/16/shell%E7%BC%96%E7%A8%8Bcase/</id>
    <published>2020-10-16T12:26:06.000Z</published>
    <updated>2020-11-14T07:25:21.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-语法结构"><a href="#1-语法结构" class="headerlink" title="1. 语法结构"></a>1. 语法结构</h3><a id="more"></a><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">说明：pattern表示需要匹配的模式</span><br><span class="line"></span><br><span class="line">case var <span class="keyword">in</span>             定义变量;var代表是变量名</span><br><span class="line">pattern <span class="number">1</span>)              模式<span class="number">1</span>;用 | 分割多个模式，相当于or</span><br><span class="line">    command1            需要执行的语句</span><br><span class="line">    ;;                  两个分号代表命令结束</span><br><span class="line">pattern <span class="number">2</span>)</span><br><span class="line">    command2</span><br><span class="line">    ;;</span><br><span class="line">pattern <span class="number">3</span>)</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">  *)              default，不满足以上模式，默认执行*)下面的语句</span><br><span class="line">    command4</span><br><span class="line">    ;;</span><br><span class="line">esacesac表示case语句结束</span><br></pre></td></tr></table></figure><h3 id="2-应用案例"><a href="#2-应用案例" class="headerlink" title="2. 应用案例"></a>2. 应用案例</h3><h4 id="㈠-脚本传不同值做不同事"><a href="#㈠-脚本传不同值做不同事" class="headerlink" title="㈠ 脚本传不同值做不同事"></a>㈠ 脚本传不同值做不同事</h4><p>具体需求：当给程序传入start、stop、restart三个不同参数时分别执行相应命令</p><p>powershell  </p><pre><code>#!/bin/env bashcase $1 in        start|S)        service apache start &amp;&gt;/dev/null &amp;&amp; echo &quot;apache 启动成功&quot;        ;;        stop|T)        service apache stop &amp;&gt;/dev/null &amp;&amp; echo &quot;apache 停止成功&quot;        ;;        restart|R)        service apache restart &amp;&gt;/dev/null &amp;&amp; echo &quot;apache 重启完毕&quot;        ;;        *)        echo &quot;请输入要做的事情...&quot;        ;;esac</code></pre><h3 id="㈡-根据用户需求选择做事"><a href="#㈡-根据用户需求选择做事" class="headerlink" title="㈡ 根据用户需求选择做事"></a>㈡ 根据用户需求选择做事</h3><p><strong>具体需求：</strong></p><p>脚本提示让用户输入需要管理的服务名，然后提示用户需要对服务做什么操作，如启动，关闭等操作</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入你要管理的服务名称(vsftpd):&quot;</span> service</span><br><span class="line">case <span class="variable">$service</span> <span class="keyword">in</span></span><br><span class="line">        vsftpd|ftp)</span><br><span class="line">        read <span class="literal">-p</span> <span class="string">&quot;请选择你需要做的事情(restart|stop):&quot;</span> action</span><br><span class="line">        case <span class="variable">$action</span> <span class="keyword">in</span></span><br><span class="line">                stop|S)</span><br><span class="line">                service vsftpd stop &amp;&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;该<span class="variable">$serivce</span>服务已经停止成功&quot;</span></span><br><span class="line">                ;;</span><br><span class="line">                <span class="built_in">start</span>)</span><br><span class="line">                service vsftpd <span class="built_in">start</span> &amp;&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;该<span class="variable">$serivce</span>服务已经成功启动&quot;</span></span><br><span class="line">                ;;</span><br><span class="line">        esac</span><br><span class="line">        ;;</span><br><span class="line">        httpd|apache)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;apache hello world&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;请输入你要管理的服务名称(vsftpd)&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="㈢-菜单提示让用户选择需要做的事"><a href="#㈢-菜单提示让用户选择需要做的事" class="headerlink" title="㈢ 菜单提示让用户选择需要做的事"></a>㈢ 菜单提示让用户选择需要做的事</h3><p><strong>具体需求：</strong></p><p>模拟一个多任务维护界面;当执行程序时先显示总菜单，然后进行选择后做相应维护监控操作</p><p>powershell  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">**********请选择*********</span><br><span class="line">h显示命令帮助</span><br><span class="line">f显示磁盘分区</span><br><span class="line">d显示磁盘挂载</span><br><span class="line">m查看内存使用</span><br><span class="line">u查看系统负载</span><br><span class="line">q退出程序</span><br><span class="line">*************************</span><br></pre></td></tr></table></figure><p><strong>思路：</strong></p><ol><li>菜单打印出来</li><li>交互式让用户输入操作编号，然后做出相应处理</li></ol><p><strong>落地实现：</strong></p><ol><li>菜单打印(分解动作)</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line"><span class="built_in">h</span>显示命令帮助</span><br><span class="line">f显示磁盘分区</span><br><span class="line">d显示磁盘挂载</span><br><span class="line">m查看内存使用</span><br><span class="line">u查看系统负载</span><br><span class="line">q退出程序</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="2"><li>最终实现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#打印菜单</span><br><span class="line">cat &lt;&lt;-EOF</span><br><span class="line">h显示命令帮助</span><br><span class="line">f显示磁盘分区</span><br><span class="line">d显示磁盘挂载</span><br><span class="line">m查看内存使用</span><br><span class="line">u查看系统负载</span><br><span class="line">q退出程序</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#让用户输入需要的操作</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">read -p &quot;请输入需要操作的选项[f|d]:&quot; var1</span><br><span class="line">case $var1 in</span><br><span class="line">h)</span><br><span class="line">cat &lt;&lt;-EOF</span><br><span class="line">        h       显示命令帮助</span><br><span class="line">        f       显示磁盘分区</span><br><span class="line">        d       显示磁盘挂载</span><br><span class="line">        m       查看内存使用</span><br><span class="line">        u       查看系统负载</span><br><span class="line">        q       退出程序</span><br><span class="line">EOF</span><br><span class="line">;;</span><br><span class="line">f)</span><br><span class="line">fdisk -l</span><br><span class="line">;;</span><br><span class="line">d)</span><br><span class="line">df -h</span><br><span class="line">;;</span><br><span class="line">m)</span><br><span class="line">free -m</span><br><span class="line">;;</span><br><span class="line">u)</span><br><span class="line">uptime</span><br><span class="line">;;</span><br><span class="line">q)</span><br><span class="line">exit</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#打印菜单</span><br><span class="line">menu()&#123;</span><br><span class="line">cat &lt;&lt;-END</span><br><span class="line">h显示命令帮助</span><br><span class="line">f显示磁盘分区</span><br><span class="line">d显示磁盘挂载</span><br><span class="line">m查看内存使用</span><br><span class="line">u查看系统负载</span><br><span class="line">q退出程序</span><br><span class="line">END</span><br><span class="line">&#125;</span><br><span class="line">menu</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">read -p &quot;请输入你的操作[h for help]:&quot; var1</span><br><span class="line">case $var1 in</span><br><span class="line">h)</span><br><span class="line">menu</span><br><span class="line">;;</span><br><span class="line">f)</span><br><span class="line">read -p &quot;请输入你要查看的设备名字[&#x2F;dev&#x2F;sdb]:&quot; var2</span><br><span class="line">case $var2 in</span><br><span class="line">&#x2F;dev&#x2F;sda)</span><br><span class="line">fdisk -l &#x2F;dev&#x2F;sda</span><br><span class="line">;;</span><br><span class="line">&#x2F;dev&#x2F;sdb)</span><br><span class="line">fdisk -l &#x2F;dev&#x2F;sdb</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">;;</span><br><span class="line">d)</span><br><span class="line">lsblk</span><br><span class="line">;;</span><br><span class="line">m)</span><br><span class="line">free -m</span><br><span class="line">;;</span><br><span class="line">u)</span><br><span class="line">uptime</span><br><span class="line">;;</span><br><span class="line">q)</span><br><span class="line">exit</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-语法结构&quot;&gt;&lt;a href=&quot;#1-语法结构&quot; class=&quot;headerlink&quot; title=&quot;1. 语法结构&quot;&gt;&lt;/a&gt;1. 语法结构&lt;/h3&gt;</summary>
    
    
    
    <category term="Shell" scheme="http://example.com/categories/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Red hat单用户修改密码</title>
    <link href="http://example.com/2020/10/11/Red-hat%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/"/>
    <id>http://example.com/2020/10/11/Red-hat%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</id>
    <published>2020-10-11T07:02:42.000Z</published>
    <updated>2020-11-14T03:11:03.208Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/10/11/Red-hat%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/timg.jpg" class><a id="more"></a><p>忘记root密码这个问题出现的几率是很高的，不过，在linux下解决这个问题也很简单，只需重启linux系统，然后引导进入linux的单用户模式（init1），由于单用户模式是不需要输入登录密码的，因此，可以直接登录系统，修改root密码即可解决问题。</p><h3 id="1、进入GRUB页面，选择相应的内核，按下’e’键；-备注：第一行为内核；第二行为援救模式"><a href="#1、进入GRUB页面，选择相应的内核，按下’e’键；-备注：第一行为内核；第二行为援救模式" class="headerlink" title="1、进入GRUB页面，选择相应的内核，按下’e’键；(备注：第一行为内核；第二行为援救模式)"></a>1、进入GRUB页面，选择相应的内核，按下’e’键；(备注：第一行为内核；第二行为援救模式)</h3><img src="/2020/10/11/Red-hat%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/1.jpg" class><h3 id="2、进入内核修改信息界面，找到Linux16这一行；"><a href="#2、进入内核修改信息界面，找到Linux16这一行；" class="headerlink" title="2、进入内核修改信息界面，找到Linux16这一行；"></a>2、进入内核修改信息界面，找到Linux16这一行；</h3><img src="/2020/10/11/Red-hat%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/2.jpg" class><p>在这一行的末尾加上init=/bin/sh</p><p>按下’Ctrl + x’进入单用户模式</p><h3 id="3、进入单用户后，重新挂载根目录，使其可写；"><a href="#3、进入单用户后，重新挂载根目录，使其可写；" class="headerlink" title="3、进入单用户后，重新挂载根目录，使其可写；"></a>3、进入单用户后，重新挂载根目录，使其可写；</h3><p>执行<code>mount -o remount,rw /</code></p><h3 id="4、修改密码-输入两遍"><a href="#4、修改密码-输入两遍" class="headerlink" title="4、修改密码(输入两遍)"></a>4、修改密码(输入两遍)</h3><h3 id="5、当selinux防火墙启动时，修改密码后要创建文件touch-autorelabel"><a href="#5、当selinux防火墙启动时，修改密码后要创建文件touch-autorelabel" class="headerlink" title="5、当selinux防火墙启动时，修改密码后要创建文件touch /.autorelabel"></a>5、当selinux防火墙启动时，修改密码后要创建文件touch /.autorelabel</h3><img src="/2020/10/11/Red-hat%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/3.png" class><h3 id="6、重启系统"><a href="#6、重启系统" class="headerlink" title="6、重启系统"></a>6、重启系统</h3><img src="/2020/10/11/Red-hat%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/3.png" class>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/2020/10/11/Red-hat%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/timg.jpg&quot; class&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://example.com/2020/10/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2020/10/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2020-10-07T11:35:27.000Z</published>
    <updated>2020-11-11T07:10:33.984Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
